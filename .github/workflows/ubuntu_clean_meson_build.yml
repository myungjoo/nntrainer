name: "Build Test - Ubuntu Meson"

on:
  pull_request:
    types: [opened, edited, reopened, synchronize]

jobs:
  meson_test:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-22.04, ubuntu-24.04 ]
        meson_options: [ "-Denable-fp16=false", "-Denable-fp16=true" ]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    - name: install additional package from PPA for testing
      run: sudo add-apt-repository -y ppa:nnstreamer/ppa && sudo apt-get update
    - name: install minimal requirements
      run: sudo apt-get update && sudo apt-get install -y gcc g++ pkg-config libopenblas-dev libiniparser-dev libjsoncpp-dev libcurl3-dev tensorflow2-lite-dev nnstreamer-dev libglib2.0-dev libgstreamer1.0-dev libgtest-dev ml-api-common-dev flatbuffers-compiler ml-inference-api-dev libunwind-dev
    - name: install additional packages for features
      run: sudo apt-get install -y python3-dev python3-numpy python3
    - name: gcc version change
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        sudo apt-get install build-essential
        sudo apt update
        sudo apt install -y gcc-13
        sudo apt install -y g++-13
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 1000 
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 1000
        sudo update-alternatives --set gcc /usr/bin/gcc-13
    - name: Install submodules
      run: git submodule sync && git submodule update --init --recursive
    - name: install build systems
      run: sudo apt install meson ninja-build
    - run: |
        meson \
          --buildtype=plain \
          --prefix=/usr \
          --sysconfdir=/etc \
          --libdir=lib/x86_64-linux-gnu \
          --bindir=lib/nntrainer/bin \
          --includedir=include \
          -Dinstall-app=true \
          -Dreduce-tolerance=false \
          -Denable-debug=true \
          -Dml-api-support=enabled \
          -Denable-nnstreamer-tensor-filter=enabled \
          -Denable-nnstreamer-tensor-trainer=enabled \
          -Denable-nnstreamer-backbone=true \
          -Dcapi-ml-common-actual=capi-ml-common \
          -Dcapi-ml-inference-actual=capi-ml-inference \
          -Denable-capi=enabled \
          ${{ matrix.meson_options }} \
          build
    - run: ninja -C build
    - name: run App Tests
      run: meson test -C build --no-suite unittests
    - name: run Unittests
      run: meson test -C build --suite unittests
    - name: Prepare valgrind test
      if: ${{ matrix.os == 'ubuntu-24.04' && matrix.meson_options: "-Debale-fp16=true" }}
      run: |
        sudo apt-get install valgrind
        cat > valgrind.supp << 'EOF'
        # Suppress known false positives from glib
        {
           glib_slice_allocator
           Memcheck:Leak
           match-leak-kinds: definite
           ...
           fun:g_slice_alloc*
        }
        {
           glib_type_system
           Memcheck:Leak
           match-leak-kinds: definite
           ...
           fun:g_type_*
        }
        {
           glib_quark_system
           Memcheck:Leak
           match-leak-kinds: definite
           ...
           fun:g_quark_*
        }
        # Suppress gtest-related allocations
        {
           gtest_framework
           Memcheck:Leak
           match-leak-kinds: definite
           ...
           fun:*testing*
        }
        # Suppress pthread-related false positives
        {
           pthread_create
           Memcheck:Leak
           match-leak-kinds: possible
           ...
           fun:pthread_create*
        }
        # Suppress dlopen-related allocations
        {
           dlopen_leak
           Memcheck:Leak
           match-leak-kinds: definite
           ...
           fun:dlopen*
        }
        EOF

        mkdir -p valgrind-reports
        error_flag=0

        meson test -C build --suite unittests --wrap='valgrind --tool=memcheck --leak-check=full --error-exitcode=1 --suppressions=../valgrind.supp --log-file=valgrind-reports/meson-test-unittest.log' --timeout-multiplier=3
        exit_code=$?
        if [ $exit_code -ne 0 ]; then
          echo "❌ Memory leak check on unit tests FAILED!"
          echo " "
          echo " "
          echo "========================================"
          echo "           VALGRIND SUMMARY (unit test)"
          echo "========================================"
          cat valgrind-reports/meson-test-unittest.log
          echo " "
          echo " "
          error_flag=1
        else
          echo "✅ All unit tests passed memory leak check!"
        fi
        meson test -C build --no-suite unittests --wrap='valgrind --tool=memcheck --leak-check=full --error-exitcode=1 --suppressions=../valgrind.supp --log-file=valgrind-reports/meson-test-apptest.log' --timeout-multiplier=3
        exit_code=$?
        if [ $exit_code -ne 0 ]; then
          echo "❌ Memory leak check on app tests FAILED!"
          echo " "
          echo " "
          echo "========================================"
          echo "           VALGRIND SUMMARY (app test)"
          echo "========================================"
          echo " "
          echo " "
          cat valgrind-reports/meson-test-apptest.log
          error_flag=1
        else
          echo "✅ All app tests passed memory leak check!"
        fi

        exit $error_flag
